import { Header } from '@/components/Header'
import { Star } from '@/components/icons/Star'
import Head from 'next/head'
import Image from 'next/image'
import React, { useState } from 'react'
import { baseUrl } from '../../../constants/movie'

const SeriePage = ({tvShowData,tvVideos,tvEpisodes,similarTvShows,tvRecommendations}) => {
  console.log(tvShowData);
  const [movie, setMovie] = useState(null)
  const youtubeKey = tvVideos.results[0]?.key

  return (
    <div className='relative h-screen bg-gradient-to-b from-gray-900/10 to-[#010511] lg:h-[140vh]'>
      <Head>
        <title>4 Frame - {tvShowData.original_name}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* Header */}
      <Header />

      <main className='relative pl-4 pb-24 lg:space-y-24 lg:pl-16'>
        <div className='flex'>
          {/* <AsideMovie
            movieData={movieData}
            movieDataReviews={movieDataReviews}
          /> */}
          <div className='flex flex-col space-y-2 py-16 md:space-y-4 lg:h-[65vh] lg:justify-end lg:pb-12'>

            <div className='absolute -z-10 top-0 left-0 h-[95vh] w-screen'>
              <Image src={`${baseUrl}${tvShowData?.backdrop_path || tvShowData?.poster_path}`}
                alt="Banner"
                layout="fill"
                objectFit="cover"
              />
            </div>

            <h1 className='text-2xl lg:text-4xl md:text-7xl font-semibold'>
              {/* {movie?.title || movie?.name || movie?.original_name} */}
            </h1>
            <p
              className='max-w-xs text-xs text-shadow-xl md:max-w-lg md:text-sm lg:max-w-2xl lg:text-base'
            >
              {/* {movie?.overview} */}
            </p>

            <div className='absolute top-40 right-10 w-4/6'>
              <div className='flex items-center'>
                <h1 className='text-3xl mb-4'>
                  {/* {movieData.title} */}
                </h1>
                <div className='flex gap-4'>
                  <Star />
                  <p>
                    {/* {movieData.vote_average.toFixed(2)} */}
                  </p>
                </div>
              </div>

              {/* <iframe className='video w-full h-96'
                title='Youtube player'
                sandbox='allow-same-origin allow-forms allow-popups allow-scripts allow-presentation'
                src={`https://youtube.com/embed/${youtubeKey}?autoplay=0`}>
              </iframe> */}
            </div>

          </div>
        </div>

        {/* Section */}
        <section className='md:space-y-10'>
          <main className='w-full md:w-8/12 flex flex-col p-8'>
            {/* Mostraremos la informaci√≥n del TV Show */}


          </main>
          {/* <Row title="Trending Now" movies={trendingNow} />
          <Row title="Top Rated" movies={topRated} />
          <Row title="Action Thrillers" movies={actionMovies} /> */}
          {/* My List */}
          {/* {list.length > 0 && <Row title="My List" movies={list} />} */}

          {/* <Row title="Comedies" movies={comedyMovies} />
          <Row title="Scary Movies" movies={horrorMovies} />
          <Row title="Romance Movies" movies={romanceMovies} />
          <Row title="Documentaries" movies={documentaries} /> */}
        </section>
      </main>
      {/* Modal */}
    </div>
  )
}

export async function getServerSideProps(context) {
  const { id } = context.query
  // console.log(id);
  const [tvShowDataResponse, tvVideosResponse, tvEpisodesResponse, similarTvShowsResponse, tvRecommendationsResponse] = await Promise.all([
    // tvShowDataResponse
    fetch(`${process.env.NEXT_PUBLIC_API_URL}/tv/${id}?api_key=${process.env.NEXT_PUBLIC_MOVIE_DB_API_KEY}&language=es-ES&page=1`),
    fetch(`${process.env.NEXT_PUBLIC_API_URL}/tv/${id}/videos?api_key=${process.env.NEXT_PUBLIC_MOVIE_DB_API_KEY}&language=es-ES&page=1`),
    // Episodes
    fetch(`https://api.themoviedb.org/3/tv/${id}/season/1?api_key=c6aeee577586ba38e487b74dfede5deb&language=es-ES`),
    // Similar shows
    fetch(`https://api.themoviedb.org/3/tv/${id}/similar?api_key=c6aeee577586ba38e487b74dfede5deb&language=es-ES`),
    //Recomendations
    fetch(`https://api.themoviedb.org/3/tv/${id}/recommendations?api_key=c6aeee577586ba38e487b74dfede5deb&language=es-ES`)
  ])

  const tvShowData = await tvShowDataResponse.json();
  const tvVideos = await tvVideosResponse.json();
  const tvEpisodes = await tvEpisodesResponse.json();
  const similarTvShows = await similarTvShowsResponse.json();
  const tvRecommendations = await tvRecommendationsResponse.json();

  return {
    props: {
      tvShowData,
      tvVideos,
      tvEpisodes,
      similarTvShows,
      tvRecommendations
    }
  }
}


export default SeriePage